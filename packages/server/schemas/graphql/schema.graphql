"""Represents Job"""
type Job implements Node {
  """The ID of an object"""
  id: ID!

  """mongodb _id"""
  _id: String!
  title: String
  description: String
  location: String
  company: String
  seniority: String
  salary: Int
  createdAt: String
  updatedAt: String
}

input JobAddInput {
  title: String!
  seniority: String!
  description: String!
  company: String!
  location: String!
  salary: Int!
  clientMutationId: String
}

type JobAddPayload {
  job: Job
  error: String
  success: String
  clientMutationId: String
}

"""A connection to a list of items."""
type JobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobEdge]
}

input JobDeleteInput {
  id: String!
  clientMutationId: String
}

type JobDeletePayload {
  error: String
  success: String
  clientMutationId: String
}

"""An edge in a connection."""
type JobEdge {
  """The item at the end of the edge"""
  node: Job!

  """A cursor for use in pagination"""
  cursor: String!
}

input JobEditInput {
  id: String!
  job: JobWithNullableInput!
  clientMutationId: String
}

type JobEditPayload {
  job: Job
  error: String
  success: String
  clientMutationId: String
}

input JobWithNullableInput {
  title: String
  seniority: String
  description: String
  location: String
  company: String
  salary: Int
}

type Mutation {
  JobAddMutation(input: JobAddInput!): JobAddPayload
  JobEditMutation(input: JobEditInput!): JobEditPayload
  JobDeleteMutation(input: JobDeleteInput!): JobDeletePayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""the root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  jobs: JobConnection!
  job(id: String!): Job!
}

"""Represents User"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongodb _id"""
  _id: String!
  name: String
  email: String
  createdAt: String
  updatedAt: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  me: User
  error: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}
